#!/usr/bin/env python
#################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#################################################################################

# Authors: Gilbert #

import rospy
import time
import math
from sensor_msgs.msg import LaserScan
from geometry_msgs.msg import Twist

from nav_msgs.msg import Odometry

import smbus


EVEN = False
LINEAR_VEL = 0.22
ANGULAR_VEL=2.84
STOP_DISTANCE = 0.3
LIDAR_ERROR = 0.05
SAFE_STOP_DISTANCE = STOP_DISTANCE + LIDAR_ERROR


ROBOT_WIDTH=0.30

direction_coefficient=1
stuckCount=0


# Get I2C bus
#bus = smbus.SMBus(1)

# ISL29125 address, 0x44(68)
# Select configuation-1register, 0x01(01)
# 0x0D(13) Operation: RGB, Range: 360 lux, Res: 16 Bits
#bus.write_byte_data(0x44, 0x01, 0x05)


#RGB reading function
# def getAndUpdateColour():
# 	# Read the data from the sensor
#         data = bus.read_i2c_block_data(0x44,0x09,6)

#         # Convert the data to green, red and blue int values
#         green = data[1]*256+data[0]
#         red = data[3]*256+data[2]
#         blue = data[5]*256+data[4]
#         # Output data to the console RGB values
#         # Uncomment the line below when you have read the red, green and blue values
#         print("RGB(%d %d %d)" % (red, green, blue))
#a
def callback(data):
    #Print current velocity
    rospy.loginfo(data.twist.twist.linear.x)
    rospy.loginfo(data.twist.twist.angular.z)


def collideCheckV2(scanList):

    danger_list=[]

    #Determine if robot needs to take decision yet (is obstacle close enough?). Also, where will it collide?
    for nr, i in enumerate(scanList):
        angle=nr-90.0
        weight=(1-abs(angle)/90.0)
        scalar=0.5

        if (i>0.05 and i<scalar and abs(angle)<= 50): #or (90-abs(angle)<45 and 90-abs(angle)>30 and i<0.25 and math.cos(90-abs(angle))*i<=ROBOT_WIDTH/2):
            danger_list.append(i)
        else:
            danger_list.append(0)
    
    #Check if there is any danger value in array. If so, return index of the lowest distance.
    res = []
    for nr, i in enumerate(danger_list):
        if i > 0:
            res.append(i)

            if (danger_list[nr-2] == 0 and danger_list[nr+2]==0) or (danger_list[nr-1] == 0 and danger_list[nr+1]==0) :
                danger_list[nr]=0



    if any(i > 0 for i in danger_list) and len(res)>6:
        return True, danger_list.index(min(i for i in danger_list if i > 0)), danger_list
    ##CODE HERE
    else:
        return False, 90, danger_list
    



def optimizedTurn(robot, turn, danger_list):
    #Read from which side the obstacle is. Implemented later
    global direction_coefficient
    global stuckCount

    direction_scanscalar= 0 if direction_coefficient==1 else 0.02
    scalar=(1-abs((turn-90))/90.0)

    twist = Twist()

    theta_inner=70
    theta_diag=

    #Change to be a dynamic range dependent on scan range
    twist.linear.x=direction_coefficient*0.22
    if turn <= 90 and turn<=180-theta and turn>=theta:
        twist.angular.z=1.3
    elif turn<=180-theta and turn>=theta:
        twist.angular.z=-1.3


    rospy.loginfo(turn)
    #rospy.loginfo(danger_list)

    #rospy.loginfo(stuckCount)

    #Evaluate if there needs to be a sharper turn:
    if (danger_list[turn]<0.14+direction_scanscalar and turn<=180-theta_inner and turn>=theta_inner) or (danger_list[turn]<0.20+direction_scanscalar and turn<=180-theta_diag and turn>=theta_diag):# or stuckCount>9:
            rospy.loginfo("Change direction")
            stuckCount=0

            direction_coefficient*=-1
            #twist.angular.z*=0.2*(2.2*(1-(danger_list[turn]/0.3)))
            #twist.linear.x=direction_coefficient*(0.08-((1-(danger_list[turn]/0.13))*0.08))
            twist.angular.z=0
            robot._cmd_pub.publish(twist)
            #rospy.sleep(0.2) #Test in real life to test how far it needs to go.


    elif danger_list[turn]/scalar<0.35+direction_scanscalar and turn<=180-theta and turn>=theta:

            if turn <= 90:
                twist.angular.z=1
            else:
                twist.angular.z=-1

            twist.linear.x=direction_coefficient*(0.22-((1-(danger_list[turn]/0.35))*0.22))

            twist.angular.z*=(1-(danger_list[turn]/0.35))*1.95+1.3#(2.84*(1-(danger_list[turn]/0.3)))

    #Check count before changing speed. Abs because speed indicates direction.
    if abs(twist.linear.x)<0.14:
        stuckCount+=1
    else:
        stuckCount=0

    #Post the instructions:
    robot._cmd_pub.publish(twist)	



class Obstacle():

    def __init__(self):

        self._cmd_pub = rospy.Publisher('cmd_vel', Twist, queue_size=1)
        self.obstacle()


    def get_scan(self):
        scan = rospy.wait_for_message('scan', LaserScan)
        scan_filter = []
       
        samples = len(scan.ranges)  # The number of samples is defined in 
                                    # turtlebot3_<model>.gazebo.xacro file,
                                    # the default is 360.
        samples_view = 1            # 1 <= samples_view <= samples
        
        #print(samples)
        if samples_view > samples:
            samples_view = samples

        if samples_view == 1:
            scan_filter=[scan.ranges[i-(direction_coefficient*90)] for i in range(180)]


        for i in range(samples_view):
            if scan_filter[i] == float('Inf'):
                scan_filter[i] = 3.5
            elif math.isnan(scan_filter[i]):
                scan_filter[i] = 0
        
        return scan_filter

    def obstacle(self):
        twist = Twist()
        turtlebot_moving = True
        global stuckCount

        while not rospy.is_shutdown():


            lidar_distances = self.get_scan()
            collideBool, collideIndex, danger_list = collideCheckV2(lidar_distances)


            if collideBool:

                #getAndUpdateColour()
                    
                optimizedTurn(self, collideIndex, danger_list)
                
                #rospy.loginfo('Stop!')
                twist.angular.z=0

            else:
                twist.linear.x = LINEAR_VEL*direction_coefficient
                twist.angular.z = 0.0
                stuckCount=0
                self._cmd_pub.publish(twist)
                #rospy.loginfo('Distance of the obstacle : %f', min_distance)

def main():
    rospy.init_node('turtlebot3_obstacle')
    #rospy.Subscriber('/odom',Odometry,callback)

    try:
        obstacle = Obstacle()
    except rospy.ROSInterruptException:
        pass

if __name__ == '__main__':
    main()
