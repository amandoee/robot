#!/usr/bin/env python
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#################################################################################

# Authors: Gilbert #

import rospy
import time
import math
from sensor_msgs.msg import LaserScan
from geometry_msgs.msg import Twist

from nav_msgs.msg import Odometry

import smbus


EVEN = False
LINEAR_VEL = 0.22
ANGULAR_VEL=2.84
STOP_DISTANCE = 0.3
LIDAR_ERROR = 0.05
SAFE_STOP_DISTANCE = STOP_DISTANCE + LIDAR_ERROR

LINEAR_VEL_SUM = 0.0
CYCLES_PASSED = 0.0

ROBOT_WIDTH=0.30

direction_coefficient=1
stuckCount=0
victim_delay=0
victim_counter=0

collision_counter=0
collision_counter_cooldown=0
#collision_distances=[10 for i in range(0,360)]
collision_distances=[0.09099999815225601, 0.10400000214576721, 0.10499999672174454, 0.10599999874830246, 0.10700000077486038, 0.1080000028014183, 0.10899999737739563, 0.10999999940395355, 0.09099999815225601, 0.09099999815225601, 0.09200000017881393, 0.09200000017881393, 0.09200000017881393, 0.09200000017881393, 0.09300000220537186, 0.09300000220537186, 0.09399999678134918, 0.0949999988079071, 0.0949999988079071, 0.09600000083446503, 0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09200000017881393, 0.09200000017881393, 0.09300000220537186, 0.09300000220537186, 0.09399999678134918, 0.09399999678134918, 0.0949999988079071, 0.09600000083446503, 0.09700000286102295, 0.09799999743700027, 0.0989999994635582, 0.10000000149011612, 0.10100000351667404, 0.10199999809265137, 0.10300000011920929, 0.10400000214576721, 0.10499999672174454, 0.10599999874830246, 0.10700000077486038, 0.1080000028014183, 0.1080000028014183, 0.10899999737739563, 0.10899999737739563, 0.10700000077486038, 0.10599999874830246, 0.10400000214576721, 0.10300000011920929, 0.10100000351667404, 0.10000000149011612, 0.0989999994635582, 0.09700000286102295, 0.09600000083446503, 0.0949999988079071, 0.09399999678134918, 0.09300000220537186, 0.09200000017881393, 0.09200000017881393, 0.09099999815225601, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10499999672174454, 0.10499999672174454, 0.10599999874830246, 0.10599999874830246, 0.10700000077486038, 0.10700000077486038, 0.1080000028014183, 0.10899999737739563, 0.10899999737739563, 0.09399999678134918, 0.09399999678134918, 0.09399999678134918, 0.09200000017881393, 0.09099999815225601, 0.09399999678134918, 0.09399999678134918, 0.0949999988079071, 0.0949999988079071, 0.09399999678134918, 0.09300000220537186, 0.09600000083446503, 0.09600000083446503, 0.09700000286102295, 0.09700000286102295, 0.09799999743700027, 0.09799999743700027, 0.0989999994635582, 0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09200000017881393, 0.09200000017881393, 0.09099999815225601, 0.09099999815225601, 0.09200000017881393, 0.09300000220537186, 0.09399999678134918, 0.09099999815225601, 0.09200000017881393, 0.09099999815225601, 0.09200000017881393, 0.09200000017881393, 0.09099999815225601, 0.09200000017881393, 0.0949999988079071, 0.09399999678134918, 0.09300000220537186, 0.09200000017881393, 0.09200000017881393, 0.09300000220537186, 0.09300000220537186, 0.09399999678134918, 0.09300000220537186, 0.09200000017881393, 0.09200000017881393, 0.09200000017881393, 0.09099999815225601, 0.09300000220537186, 0.09399999678134918, 0.0949999988079071, 0.09399999678134918, 0.09200000017881393, 0.09099999815225601, 0.09200000017881393, 0.09099999815225601, 0.09200000017881393, 0.09300000220537186, 0.09300000220537186, 0.09200000017881393, 0.09099999815225601, 0.0989999994635582, 0.09799999743700027, 0.09799999743700027, 0.09700000286102295, 0.09300000220537186, 0.09399999678134918, 0.09200000017881393, 0.09200000017881393, 0.09399999678134918, 0.09399999678134918, 0.09200000017881393, 0.09200000017881393, 0.09300000220537186, 0.09200000017881393, 0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09200000017881393, 0.09200000017881393, 0.09200000017881393, 0.09099999815225601, 0.09200000017881393, 0.09300000220537186, 0.09300000220537186, 0.09300000220537186, 0.09300000220537186, 0.09200000017881393, 0.09300000220537186, 0.09399999678134918, 0.09399999678134918, 0.09300000220537186, 0.0949999988079071, 0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09200000017881393, 0.09700000286102295, 0.09300000220537186, 0.09300000220537186, 0.09300000220537186, 0.09200000017881393, 0.0949999988079071, 0.09600000083446503, 0.09700000286102295, 0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09200000017881393, 0.09099999815225601, 0.09200000017881393, 0.09300000220537186, 0.09200000017881393, 0.09200000017881393, 0.09099999815225601, 0.09200000017881393, 0.09200000017881393, 0.09200000017881393, 0.09399999678134918, 0.09099999815225601, 0.09099999815225601, 0.09200000017881393, 0.09200000017881393, 0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09200000017881393, 0.09099999815225601, 0.09300000220537186, 0.09200000017881393, 0.09099999815225601, 0.0949999988079071, 0.09399999678134918, 0.09099999815225601, 0.09200000017881393, 0.09099999815225601, 0.09099999815225601, 0.09200000017881393, 0.09399999678134918, 0.09300000220537186, 0.09200000017881393, 0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09600000083446503, 0.09700000286102295, 0.0989999994635582, 0.10000000149011612, 0.10100000351667404, 0.10300000011920929, 0.10400000214576721, 0.10599999874830246, 0.10700000077486038, 0.10899999737739563, 0.09200000017881393, 0.09200000017881393, 0.09399999678134918, 0.0949999988079071, 0.09600000083446503, 0.09700000286102295, 0.09799999743700027, 0.0989999994635582, 0.0949999988079071, 0.09399999678134918, 0.09200000017881393, 0.09200000017881393, 0.09300000220537186, 0.09200000017881393, 0.09200000017881393, 0.09300000220537186, 0.09399999678134918, 0.09200000017881393, 0.09200000017881393, 0.09300000220537186, 0.09200000017881393, 0.09200000017881393, 0.09300000220537186, 0.09300000220537186, 0.09200000017881393, 0.09200000017881393, 0.09200000017881393, 0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09200000017881393, 0.09300000220537186, 0.09399999678134918, 0.0949999988079071, 0.09600000083446503, 0.09700000286102295, 0.09799999743700027, 0.0989999994635582, 0.10100000351667404, 0.10199999809265137, 0.10300000011920929, 0.10400000214576721, 0.10599999874830246, 0.10700000077486038, 0.10899999737739563, 0.10899999737739563, 0.10899999737739563, 0.10700000077486038, 0.10599999874830246, 0.10499999672174454, 0.10400000214576721, 0.10300000011920929, 0.10100000351667404, 0.10000000149011612, 0.09799999743700027, 0.09700000286102295, 0.09600000083446503, 0.0949999988079071, 0.09399999678134918, 0.09399999678134918, 0.09300000220537186, 0.09200000017881393, 0.09099999815225601, 0.0949999988079071, 0.09399999678134918, 0.09399999678134918, 0.09399999678134918, 0.09399999678134918, 0.09300000220537186, 0.09300000220537186, 0.09300000220537186, 0.09300000220537186, 0.09300000220537186, 0.0949999988079071, 0.09300000220537186, 0.09399999678134918, 0.09300000220537186, 0.09300000220537186, 0.09200000017881393, 0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09200000017881393, 0.09099999815225601, 0.09099999815225601, 0.09099999815225601, 0.09399999678134918, 0.0949999988079071, 0.09600000083446503, 0.09600000083446503, 0.09600000083446503, 0.09600000083446503, 0.09600000083446503, 0.0949999988079071, 0.09399999678134918, 0.09399999678134918]

changeDirectionCooldown=0

colorCriteria=False

# Get I2C bus
bus = smbus.SMBus(1)

#ISL29125 address, 0x44(68)
#Select configuation-1register, 0x01(01)
#0x0D(13) Operation: RGB, Range: 360 lux, Res: 16 Bits
bus.write_byte_data(0x44, 0x01, 0x05)


#RGB reading function<
def getAndUpdateColour():
	# Read the data from the sensor
        data = bus.read_i2c_block_data(0x44,0x09,6)

        # Convert the data to green, red and blue int values
        green = data[1]*256+data[0]
        red = data[3]*256+data[2]
        blue = data[5]*256+data[4]
        # Output data to the console RGB values
        # Uncomment the line below when you have read the red, green and blue values
        #print("RGB(%d %d %d)" % (red, green, blue))
        #if (victimCheck(red,green,blue)):
        victimCheck(red,green,blue)
        rospy.loginfo("R: %d, G: %d, B: %d" % (red,green,blue))
        rospy.loginfo("The amount of victims found: %d" % (victim_counter))

def victimCheck(red,green, blue):
    #Threshold for a relative spike in Red:
    Threshold_factor_Red=1
    global victim_delay
    global victim_counter
    global colorCriteria

    rospy.loginfo(victim_delay)

    if (victim_delay<=0):
        if (green*Threshold_factor_Red<=red and blue*Threshold_factor_Red<=red):
            if colorCriteria:
                victim_counter+=1
                victim_delay=18
            colorCriteria=True
        return True

    else:
        victim_delay-=1
        colorCriteria=False
        return False

def linearAverageVelocity(linear_vel):
    global LINEAR_VEL_SUM
    global CYCLES_PASSED
    
    LINEAR_VEL_SUM += abs(linear_vel)
    CYCLES_PASSED += 1.0
    linear_vel_average = LINEAR_VEL_SUM/CYCLES_PASSED
    
    return linear_vel_average


def callback(data):
    #Print current velocity
    rospy.loginfo(data.twist.twist.linear.x)
    rospy.loginfo(data.twist.twist.angular.z)

def noiseReduction(scanList):
    #Noise reduction
    res = []
    for nr, i in enumerate(scanList):
        if i > 0:
            res.append(i)
            if (scanList[(nr-2)%180] == 0 and scanList[(nr+2)%180]==0) or (scanList[(nr-1)%180] == 0 and scanList[(nr+1)%180]==0) :
                scanList[nr]=0
    return scanList, res


def collideCheckV2(scanList):

    global collision_distances
    global collision_counter_cooldown
    global collision_counter

    danger_list=[]
    zones_detection_angle = [0,0,0]
    zones_min_distance = [10,10,10]
    collision_counter_cooldown-=1


    direction_scanscalar= 10 if direction_coefficient==1 else 0.00 #TODO

    zone_angle = 60

    #Noise reduction of scanList
    scanList, res = noiseReduction(scanList)
    
    #Update collision_distances
    for index, i in enumerate(scanList):
        #if i!=0 and i<collision_distances[index-(direction_coefficient*90)]:
        #    collision_distances[index-(direction_coefficient*90)]=i
        #    rospy.loginfo(collision_distances)
        if i!=0 and i<collision_distances[index-(direction_coefficient*90)] and collision_counter_cooldown<=0:
            rospy.loginfo("Collision detected!")
            collision_counter+=1
            collision_counter_cooldown=10
    
    
    #Check if there are enough values in the scanList to eliminate false positives
    if len(res) < 4:
        return False, 90, zones_detection_angle, zones_min_distance , danger_list
    
    #Determine if robot needs to take decision yet (is obstacle close enough?). Also, where will it collide?
    for nr, i in enumerate(scanList):
        angle = nr-90.0
        scalar=1
        if nr < zone_angle:
            zone_index = 0
        elif nr >  180 - zone_angle:
            zone_index = 2
        else:
            zone_index = 1    

        if (i>0.05 and i<scalar): #and abs(angle)<= 50): 
            danger_list.append(i)
            #zones_detection_count[zone_index] += 1
            
            if i < zones_min_distance[zone_index]:
                zones_min_distance[zone_index] = i
                zones_detection_angle[zone_index] = angle
                
        else:
            danger_list.append(0)
    
    
    if any(i > 0 for i in danger_list) and len(res)>6:
        return True, danger_list.index(min(i for i in danger_list if i > 0)), zones_detection_angle, zones_min_distance , danger_list
        #return True, danger_list.index(min(i for i in danger_list if i > 0)), danger_list
        
    else:
        return False, 90, zones_detection_angle, zones_min_distance , danger_list
    



def optimizedTurn(robot, turn, zones_angle, zones_min_distance, danger_list):
    #Read from which side the obstacle is. Implemented later
    global direction_coefficient
    global stuckCount
    global changeDirectionCooldown
    
    changeDirectionCooldown-=1
    
    scaling_func = lambda in_start, out_start, in_end, out_end, input_value : (((out_end-out_start)/(in_end-in_start))*(input_value-in_start)) + out_start
    
    direction_turn_scalar=1.2

    twist = Twist()
    cone_angle = 30
    angle_to_wall = abs(90-turn)

    distance_to_right_wall = zones_min_distance[2]*math.cos(((90-abs(zones_angle[2]))/180)*3.14)
    distance_to_left_wall = zones_min_distance[0]*math.cos(((90-abs(zones_angle[0]))/180)*3.14)
    distance_to_closest_wall = danger_list[turn]*math.cos((angle_to_wall/180)*3.14) if angle_to_wall < cone_angle else danger_list[turn]
    distance_to_inner_wall=0.14


    front_distance = 0.5
    front_collision_turn_speed = 1.1
    front_change_direction_distance=0.16
    
    max_turn_speed_distance = 0
    max_turn_speed = 2.8
    min_turn_speed = 1.1
    min_turn_angle=90
    front_clear_distance = 0.3
    adjesent_wall_distance = 0.2

    max_speed = 0.22
    min_speed = 0.05

    quick_turn_distance = scaling_func(0, 0.4, 90, 0.2, angle_to_wall)
    chance_direction_distance = 0.2
    
    tunnel_front_threshold=0.2
    tunnel_angle=45
   
    #god
    twist.linear.x=0.22
    
    if zones_min_distance[1] < front_distance:
        if zones_angle[1] <= 0:
            twist.angular.z = front_collision_turn_speed
        else:
            twist.angular.z = -front_collision_turn_speed
    
        #rospy.loginfo("Front avoidance turn")

    else:
         twist.angular.z=0
        
        
    #rospy.loginfo([distance_to_left_wall,distance_to_right_wall,zones_min_distance[1]])
    #rospy.loginfo([zones_angle[0],zones_angle[2],zones_min_distance[0],zones_min_distance[2]])
    #rospy.loginfo(distance_to_right_wall)
    #rospy.loginfo(zones_angle)
    temp=[]  

    if ((distance_to_right_wall < chance_direction_distance and zones_min_distance[1] < tunnel_front_threshold and distance_to_left_wall < chance_direction_distance) or (zones_min_distance[1]<front_change_direction_distance)) and changeDirectionCooldown<=0:# or stuckCount>9:
        #rospy.loginfo("Change direction")
        stuckCount=0
        
        direction_coefficient*=-1
        #Calibration
        
        twist.angular.z=0
        changeDirectionCooldown=10
        #rospy.loginfo("Changing direction")
        #rospy.sleep(0.1)
        
      
    
    elif distance_to_closest_wall<quick_turn_distance and angle_to_wall<min_turn_angle and (zones_min_distance[1]<front_clear_distance): # and (distance_to_right_wall > adjesent_wall_distance or distance_to_left_wall > adjesent_wall_distance):

        #Normal and original case
        if turn <= 90:
            twist.angular.z= scaling_func(quick_turn_distance, min_turn_speed, max_turn_speed_distance, max_turn_speed, distance_to_closest_wall)
        else:
            twist.angular.z=-scaling_func(quick_turn_distance, min_turn_speed, max_turn_speed_distance, max_turn_speed, distance_to_closest_wall)

        twist.linear.x= scaling_func(quick_turn_distance, max_speed, max_turn_speed_distance, min_speed, distance_to_closest_wall)
    

    ##Override turn to go straight if the front is clear and side walls are close
    
    if (distance_to_left_wall < adjesent_wall_distance and distance_to_right_wall < adjesent_wall_distance and abs(zones_angle[0])>tunnel_angle and abs(zones_angle[2])>tunnel_angle) and changeDirectionCooldown<=0:
        twist.angular.z=0
        twist.linear.x=max_speed
        

    #rospy.loginfo(twist.linear.x)
    #rospy.loginfo(twist.angular.z)
    
    twist.linear.x *= direction_coefficient

    #Scalar applied to angular if direction is positive.
    if (direction_coefficient==1):

        twist.angular.z*=direction_turn_scalar

    #rospy.loginfo(turn)

    linearAverageVelocity(twist.linear.x)
    
    robot._cmd_pub.publish(twist)
    #Calibration
    #rospy.loginfo(zones_min_distance)
    



class Obstacle():

    def __init__(self):

        self._cmd_pub = rospy.Publisher('cmd_vel', Twist, queue_size=1)
        #self.obstacle()
        self.obstacle()


    def direction_aware_scan(self):
        scan = rospy.wait_for_message('scan', LaserScan)
        scan_filter = []
        
        #Create a 180 degree list of the laser scan data. 
        #Direction coefficient is used to set offset of the list if the robot is moving backwards.
        scan_filter=[scan.ranges[(i-(direction_coefficient*90))] for i in range(180)]
        
        return scan_filter

    def obstacle(self):
        twist = Twist()
        turtlebot_moving = True
        global stuckCount
        
        start_time = time.time()

        while not rospy.is_shutdown() or start_time+10>time.time():

            lidar_distances = self.direction_aware_scan()
            collideBool, collide_index, zones_angle, zones_min_distance, danger_list = collideCheckV2(lidar_distances)
            #getAndUpdateColour()

            #rospy.loginfo(zones_count)
            #rospy.loginfo(zones_min_distance)
            if collideBool:
                    
                optimizedTurn(self, collide_index, zones_angle, zones_min_distance, danger_list)
                
                #rospy.loginfo('Stop!')
                twist.angular.z=0

            else:
                twist.linear.x = LINEAR_VEL*direction_coefficient
                twist.angular.z = 0.0
                stuckCount=0
                
                #add to average velocity
                linearAverageVelocity(twist.linear.x)
                
                #Calibration
                self._cmd_pub.publish(twist)
                #rospy.loginfo('Distance of the obstacle : %f', danger_list[collide_index])
        
        #When done or shutdown, stop the robot
        rospy.loginfo('Turn off!')
        twist.angular.z=0
        twist.linear.x=0
        self._cmd_pub.publish(twist)

def main():
    rospy.init_node('turtlebot3_obstacle')
    #rospy.Subscriber('/odom',Odometry,callback)

    try:
        obstacle = Obstacle()
    except rospy.ROSInterruptException:
        pass

if __name__ == '__main__':
    main()