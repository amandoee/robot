#!/usr/bin/env python
#################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#################################################################################

# Authors: Gilbert #

import rospy
import time
import math
from sensor_msgs.msg import LaserScan
from geometry_msgs.msg import Twist

from nav_msgs.msg import Odometry

import smbus


EVEN = False
LINEAR_VEL = 0.22
ANGULAR_VEL=2.84
STOP_DISTANCE = 0.3
LIDAR_ERROR = 0.05
SAFE_STOP_DISTANCE = STOP_DISTANCE + LIDAR_ERROR


ROBOT_WIDTH=0.30

direction_coefficient=1
average_linear_speed=0.0
speed_updates=0.0
speed_accumulation=0.0


# Get I2C bus
#bus = smbus.SMBus(1)

# ISL29125 address, 0x44(68)
# Select configuation-1register, 0x01(01)
# 0x0D(13) Operation: RGB, Range: 360 lux, Res: 16 Bits
#bus.write_byte_data(0x44, 0x01, 0x05)


#RGB reading function
# def getAndUpdateColour():
# 	# Read the data from the sensor
#         data = bus.read_i2c_block_data(0x44,0x09,6)

#         # Convert the data to green, red and blue int values
#         green = data[1]*256+data[0]
#         red = data[3]*256+data[2]
#         blue = data[5]*256+data[4]
#         # Output data to the console RGB values
#         # Uncomment the line below when you have read the red, green and blue values
#         print("RGB(%d %d %d)" % (red, green, blue))

def callback(data):
    #Print current velocity
    rospy.loginfo(data.twist.twist.linear.x)
    rospy.loginfo(data.twist.twist.angular.z)



def findSmallest(scanList):
    x=100
    index=0
    for nr, i in enumerate(scanList):
        if i>0 and i<x:
            x=i
            index=nr
    
    return x, index

def collideCheck(scanList):

    #Determine if robot needs to take decision yet (is obstacle close enough?). Also, where will it collide?
    for nr, i in enumerate(scanList):
        angle=nr-90.0
        weight=(1-abs(angle)/90.0)
        scalar=0.5


        if i>0 and i<weight*scalar:
            #print(nr)
            return True, nr
   

    return False, 90

def collideCheckV2(scanList):

    danger_list=[]

    #Determine if robot needs to take decision yet (is obstacle close enough?). Also, where will it collide?
    for nr, i in enumerate(scanList):
        angle=nr-90.0
        weight=(1-abs(angle)/90.0)
        scalar=0.5

        if (i>0 and i<weight*scalar) or (90-abs(angle)<45 and 90-abs(angle)>30 and i<0.25 and math.cos(90-abs(angle))*i<=ROBOT_WIDTH/2):
            danger_list.append(i)
        else:
            danger_list.append(0)
    
    #Check if there is any danger value in array. If so, return index of the lowest distance.

    if any(i > 0 for i in danger_list):
        return True, danger_list.index(min(i for i in danger_list if i > 0)), danger_list
    ##CODE HERE
    else:
        return False, 90, danger_list



def squareCollideCheck(scanList):
    
    #Make an array of 
    return 0


def optimizedTurn(robot, turn, danger_list):
    #Read from which side the obstacle is. Implemented later
    global direction_coefficient

    direction_scanscalar= 1 if direction_coefficient==1 else 1.2

    duration=1
    twist = Twist()
    #print(turn)
    #Change linear velocity
    twist.linear.x=LINEAR_VEL*direction_coefficient-0.05

    #Change to be a dynamic range dependent on scan range
    if turn < 90:
        twist.angular.z=0.7
    else:
        twist.angular.z=-0.7

    #Evaluate if there needs to be a sharper turn:

    if danger_list[turn]<0.13*direction_scanscalar and turn<150 and turn>30:
            twist.linear.x=0
            direction_coefficient*=-1
            #twist.angular.z*=0.2*(2.2*(1-(danger_list[turn]/0.3)))
            twist.linear.x=direction_coefficient*0.2
            twist.angular.z=0
            robot._cmd_pub.publish(twist)
            rospy.sleep(0.2) #Test i virkelighed til at udnersøge hvor længe den er om at køre væk.



    elif danger_list[turn]<0.3*direction_scanscalar:
            #twist.angular.z*=(2.2-3*danger_list[turn])
            twist.angular.z*=(2.2*(1-(danger_list[turn]/0.3)))
            #twist.linear.x*=(((danger_list[turn]/0.3))/1)




    #if scanList[turn]<0.13:
     #       twist.linear.x=0
      #      twist.angular.z=1.4


    for i in range(duration):
                robot._cmd_pub.publish(twist)			



def reverseFromIndex(robot,index):
    #Read from which side the obstacle is. Implemented later
    duration=1
    twist = Twist()
    #print(turn)
    #Change linear velocity
    twist.linear.x=LINEAR_VEL-0.05

    #Change to be a dynamic range dependent on scan range
    if turn < 90:
        twist.angular.z=0.7
    else:
        twist.angular.z=-0.7

    for i in range(duration):
                    	robot._cmd_pub.publish(twist)			
                    	rospy.sleep(0.1)


class Obstacle():

    
    average_linear_speed=0.0
    speed_updates=0.0
    speed_accumulation=0.0

    def __init__(self):
        
        self._cmd_pub = rospy.Publisher('cmd_vel', Twist, queue_size=1)
        self.obstacle()


    def get_scan(self):
        scan = rospy.wait_for_message('scan', LaserScan)
        scan_filter = []
       
        samples = len(scan.ranges)  # The number of samples is defined in 
                                    # turtlebot3_<model>.gazebo.xacro file,
                                    # the default is 360.
        samples_view = 1            # 1 <= samples_view <= samples
        
        #print(samples)
        if samples_view > samples:
            samples_view = samples

        if samples_view == 1:
            scan_filter=[scan.ranges[i-(direction_coefficient*90)] for i in range(180)]

        else:
            left_lidar_samples_ranges = -(samples_view//2 + samples_view % 2)
            right_lidar_samples_ranges = samples_view//2
            
            left_lidar_samples = scan.ranges[left_lidar_samples_ranges:]
            right_lidar_samples = scan.ranges[:right_lidar_samples_ranges]
            scan_filter.extend(left_lidar_samples + right_lidar_samples)

        for i in range(samples_view):
            if scan_filter[i] == float('Inf'):
                scan_filter[i] = 3.5
            elif math.isnan(scan_filter[i]):
                scan_filter[i] = 0
        
        return scan_filter

    def obstacle(self):
        twist = Twist()
        turtlebot_moving = True

        while not rospy.is_shutdown():
            #Increment speed updates by one.
            self.speed_updates+=1
            self.speed_accumulation+=LINEAR_VEL

            self.average_linear_speed=self.speed_accumulation/self.speed_updates
            #print(self.average_linear_speed)

            #


            lidar_distances = self.get_scan()
            rospy.loginfo(len(lidar_distances))
            #min_distance, min_index = findSmallest(lidar_distances)

            collideBool, collideIndex, danger_list = collideCheckV2(lidar_distances)


            #print(lidar_distances)

            if collideBool:
                if turtlebot_moving:
                    #getAndUpdateColour()

                    #Check if the distance is too short to be able to turn from.
                    rospy.loginfo(collideIndex)
                    #if (toStopOrNotToStop(lidar_distances)):
                
                    twist.linear.x=-0.2
                    twist.linear.y=0.0
                    duration=1
                    
                    optimizedTurn(self, collideIndex, danger_list)

                    #turtlebot_moving = False
                    rospy.loginfo('Stop!')
                    
                    twist.angular.z=0
            else:
                twist.linear.x = LINEAR_VEL*direction_coefficient
                twist.angular.z = 0.0
                self._cmd_pub.publish(twist)
                turtlebot_moving = True
                #rospy.loginfo('Distance of the obstacle : %f', min_distance)

def main():
    rospy.init_node('turtlebot3_obstacle')
    #rospy.Subscriber('/odom',Odometry,callback)

    try:
        obstacle = Obstacle()
    except rospy.ROSInterruptException:
        pass

if __name__ == '__main__':
    main()
